[
  {
    "description": "Given a short phrase, can you report the acronym for it?",
    "concepts": [
      "higher-order functions"
    ],
    "extensions": [],
    "name": "Acronym",
    "topics": [],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/acronym/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/acronym/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/acronym.js",
    "dirname": "acronym"
  },
  {
    "description": "Implement a function to get the birthday of an actor using the MovieDB service",
    "concepts": [],
    "extensions": [],
    "name": "Actor's Birthday",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/actor-birthday/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/actor-birthday/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/actor-birthday.js",
    "dirname": "actor-birthday"
  },
  {
    "description": "Check if two words are anagrams",
    "concepts": [],
    "extensions": [],
    "name": "Anagram",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/anagram/template.xml",
    "parsons": null,
    "autograder": "https://netsblox.github.io/exercises/autograders/anagram.js",
    "dirname": "anagram"
  },
  {
    "description": "Implement the atbash cipher, an ancient encryption system created in the Middle East",
    "concepts": [],
    "extensions": [],
    "name": "Atbash Cipher",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/atbash/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/atbash/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/atbash.js",
    "dirname": "atbash"
  },
  {
    "description": "Create a function to check if a given number is between two other numbers",
    "concepts": [],
    "extensions": [],
    "name": "Between",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/between/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/between/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/between.js",
    "dirname": "between"
  },
  {
    "description": "A language model is a probabilistic model of language that can generate a series of words based on example text that it was trained on.\n\nIn this activity, we will be making a custom block to create a simple language model based on bigrams! A bigram-based language model keeps count of how often each letter follows every other letter. Using these counts, it can guess the next letter will be based on the current one!",
    "concepts": [
      "loops",
      "lists"
    ],
    "extensions": [],
    "name": "Bigram Autocomplete",
    "topics": [
      "AI"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/bigram-autocomplete/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/bigram-autocomplete/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/bigram-autocomplete.js",
    "dirname": "bigram-autocomplete"
  },
  {
    "description": "Implement the Caesar cipher, a famous classical encryption technique used by Julius Caesar",
    "concepts": [],
    "extensions": [],
    "name": "Caesar Shift",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/caesar-shift/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/caesar-shift/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/caesar-shift.js",
    "dirname": "caesar-shift"
  },
  {
    "description": "Given a variable list of input numbers (expandable slot), compute the average",
    "concepts": [],
    "extensions": [],
    "name": "Compute the Average",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/average/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/average/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/average.js",
    "dirname": "average"
  },
  {
    "description": "Given a list of numbers, compute the average",
    "concepts": [],
    "extensions": [],
    "name": "Compute the Average of a List",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/average-list/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/average-list/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/average-list.js",
    "dirname": "average-list"
  },
  {
    "description": "Count the letters in a large text and return the counts as a list",
    "concepts": [],
    "extensions": [],
    "name": "Counting Letter Frequency",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/letter-frequency/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/letter-frequency/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/letter-frequency.js",
    "dirname": "letter-frequency"
  },
  {
    "description": "Count the letters in a large text and return them as a table (recording counts by letter)",
    "concepts": [],
    "extensions": [],
    "name": "Counting Letter Frequency as Dictionary",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/letter-frequency-dictionary/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/letter-frequency-dictionary/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/letter-frequency-dictionary.js",
    "dirname": "letter-frequency-dictionary"
  },
  {
    "description": "Crack a message encrypted with the Caesar cipher using brute force",
    "concepts": [],
    "extensions": [],
    "name": "Cracking the Caesar Shift with Brute Force",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/crack-caesar-brute-force/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/crack-caesar-brute-force/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/crack-caesar-brute-force.js",
    "dirname": "crack-caesar-brute-force"
  },
  {
    "description": "Given a single decrypted letter, crack the Caesar cipher",
    "concepts": [],
    "extensions": [],
    "name": "Cracking the Caesar Shift with a Partial Solution",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/crack-caesar-partial-soln/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/crack-caesar-partial-soln/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/crack-caesar-partial-soln.js",
    "dirname": "crack-caesar-partial-soln"
  },
  {
    "description": "Create an iterator over items in a list that restarts when it reaches the end",
    "concepts": [
      "higher-order functions"
    ],
    "extensions": [],
    "name": "Cyclic Iterator",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/cyclic-iterator/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/cyclic-iterator/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/cyclic-iterator.js",
    "dirname": "cyclic-iterator"
  },
  {
    "description": "Take the factorial of any given number",
    "concepts": [
      "recursion"
    ],
    "extensions": [],
    "name": "Factorial",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/factorial/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/factorial/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/factorial.js",
    "dirname": "factorial"
  },
  {
    "description": "Implement the FizzBuzz interview question",
    "concepts": [
      "conditionals"
    ],
    "extensions": [],
    "name": "FizzBuzz",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/fizz-buzz/template.xml",
    "parsons": null,
    "autograder": "https://netsblox.github.io/exercises/autograders/fizz-buzz.js",
    "dirname": "fizz-buzz"
  },
  {
    "description": "Convert infinite sequences back to lists using 'take' and 'collect'",
    "concepts": [
      "higher-order functions"
    ],
    "extensions": [],
    "name": "From Infinite Sequences to Finite Lists",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/take-collect-sequences/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/take-collect-sequences/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/take-collect-sequences.js",
    "dirname": "take-collect-sequences"
  },
  {
    "description": "Can you make a custom block that greets someone?",
    "concepts": [],
    "extensions": [],
    "name": "Greet",
    "topics": [],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/greet/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/greet/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/greet.js",
    "dirname": "greet"
  },
  {
    "description": "Represent a counter over all the counting numbers using higher-order functions",
    "concepts": [
      "higher-order functions"
    ],
    "extensions": [],
    "name": "Intro to Infinite Sequences",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/intro-infinite-sequences/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/intro-infinite-sequences/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/intro-infinite-sequences.js",
    "dirname": "intro-infinite-sequences"
  },
  {
    "description": "Can you detect first, second, and third order isograms?",
    "concepts": [
      "conditionals",
      "lists",
      "keep"
    ],
    "extensions": [],
    "name": "Isogram",
    "topics": [],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/isogram/template.xml",
    "parsons": null,
    "autograder": "https://netsblox.github.io/exercises/autograders/isogram.js",
    "dirname": "isogram"
  },
  {
    "description": "Given a year, determine if it is a leap year",
    "concepts": [],
    "extensions": [],
    "name": "Leap Year",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/leap-year/template.xml",
    "parsons": null,
    "autograder": "https://netsblox.github.io/exercises/autograders/leap-year.js",
    "dirname": "leap-year"
  },
  {
    "description": "Implement Luhn formula, a checksum used to check validity of a variety of numbers including credit card numbers and Canadian Social Insurance Numbers",
    "concepts": [
      "lists"
    ],
    "extensions": [],
    "name": "Luhn Formula",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/luhn-formula/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/luhn-formula/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/luhn-formula.js",
    "dirname": "luhn-formula"
  },
  {
    "description": "Implement map over an infinite sequence (from 'Intro to Infinite Sequences')",
    "concepts": [
      "higher-order functions"
    ],
    "extensions": [],
    "name": "Mapping Over Infinite Sequences",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/map-sequence/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/map-sequence/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/map-sequence.js",
    "dirname": "map-sequence"
  },
  {
    "description": "Add the numbers to a minesweeper board (knowing the mine locations)",
    "concepts": [
      "loops",
      "keep",
      "lists"
    ],
    "extensions": [],
    "name": "Minesweeper",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/minesweeper/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/minesweeper/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/minesweeper.js",
    "dirname": "minesweeper"
  },
  {
    "description": "Return a list of the averages for every N consecutive numbers in a given list",
    "concepts": [
      "loops"
    ],
    "extensions": [],
    "name": "Moving Average",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/moving-average/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/moving-average/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/moving-average.js",
    "dirname": "moving-average"
  },
  {
    "description": "Check if a phrase contains all the letters of the alphabet",
    "concepts": [
      "loops",
      "lists"
    ],
    "extensions": [],
    "name": "Pangram",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/pangram/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/pangram/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/pangram.js",
    "dirname": "pangram"
  },
  {
    "description": "Implement the Sieve of Eratosthenes algorithm for finding prime numbers",
    "concepts": [
      "loops",
      "lists"
    ],
    "extensions": [],
    "name": "Sieve of Eratosthenes",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/sieve/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/sieve/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/sieve.js",
    "dirname": "sieve"
  },
  {
    "description": "Given a list and window size, return a list of all windows of the given size from the list.",
    "concepts": [
      "loops"
    ],
    "extensions": [],
    "name": "Sliding Windows",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/sliding-windows/template.xml",
    "parsons": null,
    "autograder": "https://netsblox.github.io/exercises/autograders/sliding-windows.js",
    "dirname": "sliding-windows"
  },
  {
    "description": "Can you transpose musical notes?",
    "concepts": [
      "music"
    ],
    "extensions": [
      "https://extensions.netsblox.org/extensions/BeatBlox/index.js"
    ],
    "name": "Transposing Music",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/transpose-music/template.xml",
    "parsons": null,
    "autograder": "https://netsblox.github.io/exercises/autograders/transpose-music.js",
    "dirname": "transpose-music"
  },
  {
    "description": "Implement the Vigenere cipher, an extension of the Caesar cipher",
    "concepts": [
      "loops",
      "lists"
    ],
    "extensions": [],
    "name": "Vigenere Cipher",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/vigenere/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/vigenere/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/vigenere.js",
    "dirname": "vigenere"
  }
]
