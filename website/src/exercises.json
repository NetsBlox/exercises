[
  {
    "description": "Implement a function to get the birthday of an actor using the MovieDB service",
    "concepts": [],
    "name": "Actor's Birthday",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/actor-birthday/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/actor-birthday/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/actor-birthday.js",
    "dirname": "actor-birthday"
  },
  {
    "description": "Check if two words are anagrams",
    "concepts": [],
    "name": "Anagram",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/anagram/template.xml",
    "parsons": null,
    "autograder": "https://netsblox.github.io/exercises/autograders/anagram.js",
    "dirname": "anagram"
  },
  {
    "description": "Implement the atbash cipher, an ancient encryption system created in the Middle East",
    "concepts": [],
    "name": "Atbash Cipher",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/atbash/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/atbash/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/atbash.js",
    "dirname": "atbash"
  },
  {
    "description": "Create a function to check if a given number is between two other numbers",
    "concepts": [],
    "name": "Between",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/between/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/between/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/between.js",
    "dirname": "between"
  },
  {
    "description": "Implement the Caesar cipher, a famous classical encryption technique used by Julius Caesar",
    "concepts": [],
    "name": "Caesar Shift",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/caesar-shift/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/caesar-shift/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/caesar-shift.js",
    "dirname": "caesar-shift"
  },
  {
    "description": "Given a variable list of input numbers (expandable slot), compute the average",
    "concepts": [],
    "name": "Compute the Average",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/average/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/average/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/average.js",
    "dirname": "average"
  },
  {
    "description": "Given a list of numbers, compute the average",
    "concepts": [],
    "name": "Compute the Average of a List",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/average-list/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/average-list/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/average-list.js",
    "dirname": "average-list"
  },
  {
    "description": "Count the letters in a large text and return the counts as a list",
    "concepts": [],
    "name": "Counting Letter Frequency",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/letter-frequency/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/letter-frequency/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/letter-frequency.js",
    "dirname": "letter-frequency"
  },
  {
    "description": "Count the letters in a large text and return them as a table (recording counts by letter)",
    "concepts": [],
    "name": "Counting Letter Frequency as Dictionary",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/letter-frequency-dictionary/template.xml",
    "parsons": null,
    "autograder": "https://netsblox.github.io/exercises/autograders/letter-frequency-dictionary.js",
    "dirname": "letter-frequency-dictionary"
  },
  {
    "description": "Crack a message encrypted with the Caesar cipher using brute force",
    "concepts": [],
    "name": "Cracking the Caesar Shift with Brute Force",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/crack-caesar-brute-force/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/crack-caesar-brute-force/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/crack-caesar-brute-force.js",
    "dirname": "crack-caesar-brute-force"
  },
  {
    "description": "Given a single decrypted letter, crack the Caesar cipher",
    "concepts": [],
    "name": "Cracking the Caesar Shift with a Partial Solution",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/crack-caesar-partial-soln/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/crack-caesar-partial-soln/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/crack-caesar-partial-soln.js",
    "dirname": "crack-caesar-partial-soln"
  },
  {
    "description": "Create an iterator over items in a list that restarts when it reaches the end",
    "concepts": [
      "higher-order functions"
    ],
    "name": "Cyclic Iterator",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/cyclic-iterator/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/cyclic-iterator/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/cyclic-iterator.js",
    "dirname": "cyclic-iterator"
  },
  {
    "description": "Take the factorial of any given number",
    "concepts": [
      "recursion"
    ],
    "name": "Factorial",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/factorial/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/factorial/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/factorial.js",
    "dirname": "factorial"
  },
  {
    "description": "Implement the FizzBuzz interview question",
    "concepts": [
      "conditionals"
    ],
    "name": "FizzBuzz",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/fizz-buzz/template.xml",
    "parsons": null,
    "autograder": "https://netsblox.github.io/exercises/autograders/fizz-buzz.js",
    "dirname": "fizz-buzz"
  },
  {
    "description": "Convert infinite sequences back to lists using 'take' and 'collect'",
    "concepts": [
      "higher-order functions"
    ],
    "name": "From Infinite Sequences to Finite Lists",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/take-collect-sequences/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/take-collect-sequences/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/take-collect-sequences.js",
    "dirname": "take-collect-sequences"
  },
  {
    "description": "Represent a counter over all the counting numbers using higher-order functions",
    "concepts": [
      "higher-order functions"
    ],
    "name": "Intro to Infinite Sequences",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/intro-infinite-sequences/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/intro-infinite-sequences/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/intro-infinite-sequences.js",
    "dirname": "intro-infinite-sequences"
  },
  {
    "description": "Given a year, determine if it is a leap year",
    "concepts": [],
    "name": "Leap Year",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/leap-year/template.xml",
    "parsons": null,
    "autograder": "https://netsblox.github.io/exercises/autograders/leap-year.js",
    "dirname": "leap-year"
  },
  {
    "description": "Implement map over an infinite sequence (from 'Intro to Infinite Sequences')",
    "concepts": [
      "higher-order functions"
    ],
    "name": "Mapping Over Infinite Sequences",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/map-sequence/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/map-sequence/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/map-sequence.js",
    "dirname": "map-sequence"
  },
  {
    "description": "Return a list of the averages for every N consecutive numbers in a given list",
    "concepts": [
      "loops"
    ],
    "name": "Moving Average",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/moving-average/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/moving-average/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/moving-average.js",
    "dirname": "moving-average"
  },
  {
    "description": "Implement a 1-gram language model to be used for text autocompletion",
    "concepts": [
      "loops",
      "lists"
    ],
    "name": "N-gram Autocomplete (n=1)",
    "topics": [
      "AI"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/1-gram-autocomplete/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/1-gram-autocomplete/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/1-gram-autocomplete.js",
    "dirname": "1-gram-autocomplete"
  },
  {
    "description": "Given a list and window size, return a list of all windows of the given size from the list.",
    "concepts": [
      "loops"
    ],
    "name": "Sliding Windows",
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/sliding-windows/template.xml",
    "parsons": null,
    "autograder": "https://netsblox.github.io/exercises/autograders/sliding-windows.js",
    "dirname": "sliding-windows"
  },
  {
    "description": "Implement the Vigenere cipher, an extension of the Caesar cipher",
    "concepts": [
      "loops",
      "lists"
    ],
    "name": "Vigenere Cipher",
    "topics": [
      "cryptography"
    ],
    "template": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/vigenere/template.xml",
    "parsons": "https://raw.githubusercontent.com/NetsBlox/exercises/master/exercises/vigenere/parsons.xml",
    "autograder": "https://netsblox.github.io/exercises/autograders/vigenere.js",
    "dirname": "vigenere"
  }
]